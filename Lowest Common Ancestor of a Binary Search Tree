#235. Lowest Common Ancestor of a Binary Search Tree
/*思路：利用二叉搜索树的性质，若当前节点在给定节点的中间，返回该节点，若两个给定节点同在当前节点的左侧，最低公共祖先在当前节点的左子树中，
        更新当前节点为左子节点，否则更新为右子节点
        判断是否当前节点是否在给定节点中间的方法为当前节点和两个节点的差值乘积的正负，为正表明不在，否则在
*/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || p == null || q == null) return null;
        if ((root.val - p.val) * (root.val - q.val) <=0) return root;
        else {
            return root.val > p.val ? lowestCommonAncestor(root.left, p, q) : lowestCommonAncestor(root.right, p, q);
        }
        
    }
}
