/*思路：
      两个数相加后要考虑是否有进位，维护两个变量，一个存储进位，一个存储去除进位后的和。
      创建一个新链表存储相加后的结果，循环相加两个链表，直到两个链表都为null并且无进位。
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0), node = head;
        int carry = 0, sum = 0;
        while (l1 != null || l2 != null || carry != 0) {//判断两个链表是否到头及进位是否为0
            sum = (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0) + carry;
            carry = sum / 10;
            node.next = new ListNode(sum % 10);
            node = node.next;
            l1 = (l1 != null ? l1.next : null);
            l2 = (l2 != null ? l2.next : null);
        }
        return head.next;
    }
}
